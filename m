Return-Path: <qemu-devel-bounces+lists+qemu-devel=lfdr.de@nongnu.org>
X-Original-To: lists+qemu-devel@lfdr.de
Delivered-To: lists+qemu-devel@lfdr.de
Received: from lists.gnu.org (lists.gnu.org [209.51.188.17])
	by mail.lfdr.de (Postfix) with ESMTPS id A375C720318
	for <lists+qemu-devel@lfdr.de>; Fri,  2 Jun 2023 15:20:20 +0200 (CEST)
Received: from localhost ([::1] helo=lists1p.gnu.org)
	by lists.gnu.org with esmtp (Exim 4.90_1)
	(envelope-from <qemu-devel-bounces@nongnu.org>)
	id 1q54gT-0000uI-2y; Fri, 02 Jun 2023 09:19:13 -0400
Received: from eggs.gnu.org ([2001:470:142:3::10])
 by lists.gnu.org with esmtps (TLS1.2:ECDHE_RSA_AES_256_GCM_SHA384:256)
 (Exim 4.90_1) (envelope-from <anjo@rev.ng>) id 1q54gR-0000uA-Bo
 for qemu-devel@nongnu.org; Fri, 02 Jun 2023 09:19:11 -0400
Received: from rev.ng ([5.9.113.41])
 by eggs.gnu.org with esmtps (TLS1.2:ECDHE_RSA_AES_256_GCM_SHA384:256)
 (Exim 4.90_1) (envelope-from <anjo@rev.ng>) id 1q54gP-00083C-IS
 for qemu-devel@nongnu.org; Fri, 02 Jun 2023 09:19:11 -0400
DKIM-Signature: v=1; a=rsa-sha256; q=dns/txt; c=relaxed/relaxed; d=rev.ng;
 s=dkim; h=Content-Transfer-Encoding:Content-Type:In-Reply-To:From:References:
 Cc:To:Subject:Reply-To:MIME-Version:Date:Message-ID:Sender:Content-ID:
 Content-Description:Resent-Date:Resent-From:Resent-Sender:Resent-To:Resent-Cc
 :Resent-Message-ID:List-Id:List-Help:List-Unsubscribe:List-Subscribe:
 List-Post:List-Owner:List-Archive;
 bh=mIqUPbvc/7luhL8e+TGlAGBhLYOF+Afx0vjaPB2QS8Q=; b=T+x2I4VU8O63Fx2rDW7F+aR4KC
 b3tzo0R7izS345VN7qu2Kdzns0as4axM6W8PPdu5wOPKv4Z/8H3RTsNxNwN0TfUrsiEmbuv70qooe
 IZLvOhvaYevgxoSUH+aRnUKu4+p6JT25Iiq6I1Sybr/sW/dkjiF2eQwJ0G46pNEAlGVI=;
Message-ID: <a21d4224-0219-4bd3-f276-605401bd62a1@rev.ng>
Date: Fri, 2 Jun 2023 15:18:53 +0200
MIME-Version: 1.0
User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:102.0) Gecko/20100101
 Thunderbird/102.7.0
Subject: Re: Help finding Coverity defects for generated Hexagon code
Content-Language: en-US
To: Brian Cain <bcain@quicinc.com>,
 Richard Henderson <richard.henderson@linaro.org>,
 Paolo Bonzini <pbonzini@redhat.com>, Peter Maydell <peter.maydell@linaro.org>
Cc: "qemu-devel@nongnu.org" <qemu-devel@nongnu.org>
References: <6467d9133bd9f_57b172b16e2c9d98835043@prd-scan-dashboard-0.mail>
 <4ffdd486-ec7d-49c7-1330-0d0b090735b9@rev.ng>
 <CAFEAcA9ZctmXrCAwsAk6eBeF4ojB4QBwq16TsdcGZPHTin6LEg@mail.gmail.com>
 <CABgObfa7N+A=ReW-jme=Nx+wt7rZPcpuy-ANmxepcJMxeXeeWA@mail.gmail.com>
 <5de92654-52e3-6042-de5e-b2334b737c13@rev.ng>
 <57f69ad1-2546-535b-75fe-f5e3d858504b@linaro.org>
 <SN6PR02MB4205B9575465FDD1A6A2F898B8409@SN6PR02MB4205.namprd02.prod.outlook.com>
Organization: rev.ng
In-Reply-To: <SN6PR02MB4205B9575465FDD1A6A2F898B8409@SN6PR02MB4205.namprd02.prod.outlook.com>
Content-Type: text/plain; charset=UTF-8; format=flowed
Content-Transfer-Encoding: 8bit
Received-SPF: pass client-ip=5.9.113.41; envelope-from=anjo@rev.ng; helo=rev.ng
X-Spam_score_int: -21
X-Spam_score: -2.2
X-Spam_bar: --
X-Spam_report: (-2.2 / 5.0 requ) BAYES_00=-1.9, DKIM_SIGNED=0.1,
 DKIM_VALID=-0.1, DKIM_VALID_AU=-0.1, DKIM_VALID_EF=-0.1, NICE_REPLY_A=-0.095,
 SPF_HELO_PASS=-0.001, SPF_PASS=-0.001,
 T_SCC_BODY_TEXT_LINE=-0.01 autolearn=ham autolearn_force=no
X-Spam_action: no action
X-BeenThere: qemu-devel@nongnu.org
X-Mailman-Version: 2.1.29
Precedence: list
List-Id: <qemu-devel.nongnu.org>
List-Unsubscribe: <https://lists.nongnu.org/mailman/options/qemu-devel>,
 <mailto:qemu-devel-request@nongnu.org?subject=unsubscribe>
List-Archive: <https://lists.nongnu.org/archive/html/qemu-devel>
List-Post: <mailto:qemu-devel@nongnu.org>
List-Help: <mailto:qemu-devel-request@nongnu.org?subject=help>
List-Subscribe: <https://lists.nongnu.org/mailman/listinfo/qemu-devel>,
 <mailto:qemu-devel-request@nongnu.org?subject=subscribe>
Reply-to:  anjo@rev.ng
X-ACL-Warn: ,  Anton Johansson <anjo@rev.ng>
From:  Anton Johansson via <qemu-devel@nongnu.org>
Errors-To: qemu-devel-bounces+lists+qemu-devel=lfdr.de@nongnu.org
Sender: qemu-devel-bounces+lists+qemu-devel=lfdr.de@nongnu.org


On 5/23/23 19:56, Brian Cain wrote:
>
>> -----Original Message-----
>> From: qemu-devel-bounces+bcain=quicinc.com@nongnu.org <qemu-devel-
>> bounces+bcain=quicinc.com@nongnu.org> On Behalf Of Richard Henderson
>> Sent: Tuesday, May 23, 2023 10:32 AM
>> To: anjo@rev.ng; Paolo Bonzini <pbonzini@redhat.com>; Peter Maydell
>> <peter.maydell@linaro.org>
>> Cc: qemu-devel@nongnu.org
>> Subject: Re: Help finding Coverity defects for generated Hexagon code
>>
>> WARNING: This email originated from outside of Qualcomm. Please be wary of
>> any links or attachments, and do not enable macros.
>>
>> On 5/23/23 06:29, Anton Johansson via wrote:
>>> On 5/23/23 12:29, Paolo Bonzini wrote:
>>>> On Tue, May 23, 2023 at 11:18 AM Peter Maydell
>> <peter.maydell@linaro.org> wrote:
>>>>> On Mon, 22 May 2023 at 21:24, Anton Johansson <anjo@rev.ng> wrote:
>>>>>> Hi,
>>>>>>
>>>>>> coverity recently reported some defects in code generated by idef-parser
>>>>>> (email attached). These defects are expected and we plan to emit a
>>>>>> /* coverity[event_tag] */ comment to disable the specific event triggered.
>>>>> We don't mark coverity false positives with comments in the
>>>>> source. For the free online scanner, we just mark them as
>>>>> false positives in the GUI (with an explanation of why they're
>>>>> false positives).
>>>> They aren't visible in the GUI because the whole "hexagon generated
>>>> files" component is marked as not-analyzed; which apparently means it
>>>> _is_ analyzed and visible in the emails but not in the GUI.
>>> Ah right...
>>>
>>>> The event tag for this error should be "dead_error_condition". In
>>>> theory, the hexagon generated files could be a good exception to the
>>>> rules that we don't mark false positives in the source, but finding
>>>> the right line to add the tag can be messy.
>>> If we decide to mark these in source, my plan was to simply emit
>>>
>>>       if (qemu_tmp_2 >= 64) {
>>>           /* coverity[dead_error_condition] */
>>>           tcg_gen_movi_i64(tmp_5, 0);
>>>       } else {
>>>           tcg_gen_shli_i64(tmp_5, tmp_4, qemu_tmp_2);
>>>       }
>>>
>>> for all of these safety checks around shifts/extracts where the defect could
>>> trigger. Maybe this is overreaching as we would also mark similar branches in
>>> other instructions that are alive, but if we knew they were dead at translation
>>> time we could simply not emit them to begin with.
>> It would be simpler to do better constant propagation and folding in the
>> generator than to
>> do the markup.  All of the cases for which it warns are really quite trivial.
> But the host compiler can already do this for us.  Is the markup really more work than almost anything else?
To add to this:

We did look into dealing with these coverity warnings through constant
propagating a few weeks back, and yes it's not that bad.  You really
only have to deal with sign-/zeroextensions and then perform the check
at translation time instead of emitting it.

However, constant propagating only to deal with coverity warnings feels
like the wrong way to go about it.  If we want to go in this direction
we should really propagate/fold as much as possible, which requires
relaxing some assumptions on immediates (always positve and
representable in uint64_t).  Even if this is not hard to do, it
increases the complexity of the parser for something the compiler
already does for us.

For the time being, I'll submit a patch emitting a comment, and if we
decide it's worthwhile to constant fold we'll drop the comments then.

-- 
Anton Johansson,
rev.ng Labs Srl.


