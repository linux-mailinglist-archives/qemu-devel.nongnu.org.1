Return-Path: <qemu-devel-bounces+lists+qemu-devel=lfdr.de@nongnu.org>
X-Original-To: lists+qemu-devel@lfdr.de
Delivered-To: lists+qemu-devel@lfdr.de
Received: from lists.gnu.org (lists.gnu.org [209.51.188.17])
	by mail.lfdr.de (Postfix) with ESMTPS id 9AC69A0A0F1
	for <lists+qemu-devel@lfdr.de>; Sat, 11 Jan 2025 06:12:39 +0100 (CET)
Received: from localhost ([::1] helo=lists1p.gnu.org)
	by lists.gnu.org with esmtp (Exim 4.90_1)
	(envelope-from <qemu-devel-bounces@nongnu.org>)
	id 1tWTmV-0005B9-3e; Sat, 11 Jan 2025 00:11:31 -0500
Received: from eggs.gnu.org ([2001:470:142:3::10])
 by lists.gnu.org with esmtps (TLS1.2:ECDHE_RSA_AES_256_GCM_SHA384:256)
 (Exim 4.90_1) (envelope-from <michael@anarch128.org>)
 id 1tWTmE-0005A6-H3
 for qemu-devel@nongnu.org; Sat, 11 Jan 2025 00:11:15 -0500
Received: from anarch128.org ([2001:4801:7825:104:be76:4eff:fe10:52ae])
 by eggs.gnu.org with esmtps (TLS1.2:ECDHE_RSA_AES_256_GCM_SHA384:256)
 (Exim 4.90_1) (envelope-from <michael@anarch128.org>)
 id 1tWTmC-0004AX-Mc
 for qemu-devel@nongnu.org; Sat, 11 Jan 2025 00:11:14 -0500
Received: from [192.168.1.8] (default-rdns.vocus.co.nz [202.150.110.104] (may
 be forged)) (authenticated bits=0)
 by anarch128.org (8.15.2/8.15.2/Debian-22+deb11u3) with ESMTPSA id
 50B5AwT61425585
 (version=TLSv1.3 cipher=TLS_AES_128_GCM_SHA256 bits=128 verify=NO);
 Sat, 11 Jan 2025 05:11:01 GMT
Authentication-Results: anarch128.org; auth=pass;
 dkim=pass (2048-bit rsa key sha256) header.d=anarch128.org
 header.i=@anarch128.org header.b=M80hAWAA header.a=rsa-sha256 header.s=100003;
 x-return-mx=pass header.domain=anarch128.org policy.is_org=yes (MX Records
 found: mail.anarch128.org); 
 x-return-mx=pass smtp.domain=anarch128.org policy.is_org=yes (MX Records
 found: mail.anarch128.org)
DKIM-Signature: v=1; a=rsa-sha256; c=simple/simple; d=anarch128.org;
 s=100003; t=1736572266;
 bh=VKcsFvEpoCV0UEQJaWkCmxzuKdM7ICQMdmjZDi14ZAs=;
 h=Date:Subject:To:Cc:References:From:In-Reply-To:From;
 b=M80hAWAAXJf3xtb6nJZe04e6RyGydx56Z8fFsWfjYB4Zrr1Ihl2yww5x6M7A6GEV5
 9DEgN+EBBjclhY45VAQSUTIy8feYjCUD/SFrCOCAiUDyhL3XfNCZ2c871qslyMoDvP
 mbDYLKMoRANJn32QjjIZ3C4d1oJubBVLoRKJslvypJF6xIKlGccbRNA8bz3phQooOK
 eX8VY+hUEzwKTqCwRsKQ2NyJpQV1bn7x52d9TMCIw9CspJW4WjitPjtW5crKMkRhc6
 NbsPcD+0Hd8iVhcmAYAnVBJ53fh3qCXVXQjZHegRAPnhjHEfIh5n8fFB7Moem9LtqV
 DCENNmYFFseHA==
Message-ID: <1384aea6-5381-4080-99ed-1da4494aa41a@anarch128.org>
Date: Sat, 11 Jan 2025 18:10:52 +1300
MIME-Version: 1.0
User-Agent: Mozilla Thunderbird
Subject: Re: [RFC]: port of embedded x86-mini disassembler to QEMU
To: Paolo Bonzini <pbonzini@redhat.com>
Cc: qemu-devel <qemu-devel@nongnu.org>,
 Richard Henderson <richard.henderson@linaro.org>,
 Eduardo Habkost <eduardo@habkost.net>, Zhao Liu <zhao1.liu@intel.com>
References: <20250110094400.512788-1-michael@anarch128.org>
 <CABgObfY_GOQN5OWBQXYvfrBtNVZGGc75p3gRHrpqQNxUErfB3A@mail.gmail.com>
 <5244f8e9-b58d-4d37-9fe7-2236a862fd91@anarch128.org>
 <CABgObfYdaBun9pZqTtZS_PzSKvrF=f5DE-Vb5pLMWq1HPcAVAg@mail.gmail.com>
Content-Language: en-US
From: Michael Clark <michael@anarch128.org>
In-Reply-To: <CABgObfYdaBun9pZqTtZS_PzSKvrF=f5DE-Vb5pLMWq1HPcAVAg@mail.gmail.com>
Content-Type: text/plain; charset=UTF-8; format=flowed
Content-Transfer-Encoding: 7bit
Received-SPF: pass client-ip=2001:4801:7825:104:be76:4eff:fe10:52ae;
 envelope-from=michael@anarch128.org; helo=anarch128.org
X-Spam_score_int: -16
X-Spam_score: -1.7
X-Spam_bar: -
X-Spam_report: (-1.7 / 5.0 requ) BAYES_00=-1.9, DKIM_INVALID=0.1,
 DKIM_SIGNED=0.1, SPF_HELO_PASS=-0.001,
 SPF_PASS=-0.001 autolearn=no autolearn_force=no
X-Spam_action: no action
X-BeenThere: qemu-devel@nongnu.org
X-Mailman-Version: 2.1.29
Precedence: list
List-Id: <qemu-devel.nongnu.org>
List-Unsubscribe: <https://lists.nongnu.org/mailman/options/qemu-devel>,
 <mailto:qemu-devel-request@nongnu.org?subject=unsubscribe>
List-Archive: <https://lists.nongnu.org/archive/html/qemu-devel>
List-Post: <mailto:qemu-devel@nongnu.org>
List-Help: <mailto:qemu-devel-request@nongnu.org?subject=help>
List-Subscribe: <https://lists.nongnu.org/mailman/listinfo/qemu-devel>,
 <mailto:qemu-devel-request@nongnu.org?subject=subscribe>
Errors-To: qemu-devel-bounces+lists+qemu-devel=lfdr.de@nongnu.org
Sender: qemu-devel-bounces+lists+qemu-devel=lfdr.de@nongnu.org

On 1/11/25 05:05, Paolo Bonzini wrote:
> Il ven 10 gen 2025, 14:03 Michael Clark<michael@anarch128.org> ha scritto:
> 
>> On 1/11/25 00:07, Paolo Bonzini wrote:
>>> Il ven 10 gen 2025, 10:52 Michael Clark<michael@anarch128.org> ha
>> scritto:
>>>> a note to announce a port of the x86-mini disassembler to QEMU.
>>>>
>>>> -https://github.com/michaeljclark/qemu/tree/x86-mini
>>> I assume the huge .h files are autogenerated? If so, QEMU cannot use them
>>> without including the human-readable sources in the tree.
>> yes indeed. there is an x86_tablegen.py python script in the other repo
>> but it is not in the current patch. it would be somewhat easy to read
>> the tables from CSV files directly into arrays at the expense of several
>> more milliseconds during startup. the revised operand formats maps
>> relatively strictly to enum definitions with string tables in the source
>> so a reader in C would not be impossible
> 
> Building the tables at compile time is fine, only leaving out the script is
> not.


okay. now it's even smaller. I don't mind if folks kick the tyres on the
code but I'm not asking for it to be merged. I'd want it to be in better
shape if folks decide they like it. and I don't want to expose anyone
including myself to metadata format changes. so maybe 6-18 months time.

$ git show | diffstat
  b/disas/meson.build       |   93
  b/disas/x86-core.c        |    5
  b/disas/x86.h             |    2
  b/scripts/x86-tablegen.py |  540 +++
  disas/x86-enums.inc       | 1883 -----------
  disas/x86-tables.inc      | 6218 --------------------------------------
  6 files changed, 636 insertions(+), 8105 deletions(-)

$ wc -l disas/x86*[ch] scripts/x86-tablegen.py
   2846 disas/x86-core.c
     92 disas/x86-disas.c
   1758 disas/x86.h
    540 scripts/x86-tablegen.py
   5236 total

$ wc -l disas/x86-data/*.csv | tail -5
      4 disas/x86-data/x86_waitpkg.csv
      2 disas/x86-data/x86_wbnoinvd.csv
    145 disas/x86-data/x86_x87.csv
      3 disas/x86-data/x86_xsaveopt.csv
   3731 total

x86_fuzzer.c in the other repo might be interesting. ~900 LOC showing
instruction set metadata reflection for generative fuzzing. it has a
tiny combinatorial expansion algorithm with constraints for conditional
domain reduction to prune the graph. like I vary imm when we have RAX
as the base register and various other pruning heuristics such as riz.
it needs some random synthesis but I will get to that at some point.

https://github.com/michaeljclark/x86/blob/trunk/tests/x86_fuzzer.c

it exposes some of the internals of the codec. the tables exclusively
have a maximum of two opcode bytes with one conditionally being ModRM.
the codec converts REX.W/VEX/EVEX/prefix/map into trie page selectors.
it also expands out ModRM masks if multiple instructions straddle the
same opcode byte with different mod values. like this curiosity where
the same opcode is used for two instructions, one as reg, one as mem.

   f3 0f c7 f7          senduipi    edi
   f3 0f c7 77 01       vmxon       qword ptr [rdi + 1]

so I spent time on instrumentation (output is snipped due to width).

$ ./build/x86_opcodes -o -g | egrep '(senduipi|vmxon|cmpxchg8b)'
| cmpxchg8b m64     | c7 08 | ff f8 | .lex.0f.w0 c7 /1 .lock   |
| cmpxchg8b m64     | c7 48 | ff f8 | .lex.0f.w0 c7 /1 .lock   |
| cmpxchg8b m64     | c7 88 | ff f8 | .lex.0f.w0 c7 /1 .lock   |
| vmxon m64         | c7 30 | ff f8 | .lex.f3.0f.w0 c7 /6      |
| vmxon m64         | c7 70 | ff f8 | .lex.f3.0f.w0 c7 /6      |
| vmxon m64         | c7 b0 | ff f8 | .lex.f3.0f.w0 c7 /6      |
| senduipi rw       | c7 f0 | ff f8 | .lex.f3.0f.w0 c7 /6      |

this shows you the LEX format which has new suffixes like 'wx' and 'ww'
for default 32 or default 64 operand sizes. looks a lot like VEX/EVEX.
and all legacy instructions have been converted to use this form so it
is much easier to reason about decoding them. in any case, folks might
be curious and decide they want to experiment with it.

$ echo aaa | qemu-x86_64 -d in_asm,out_asm /usr/bin/openssl sha256

I see SSE2/AVX instructions in the output and it doesn't crash. :D
it's quite eye-opening to see the codegen. it would be nice to get
qemu-system to use the MMU by running the translator with the HV on.

btw Intel XED is pretty neat but its build system is totally alien.

Michael.

